💡 AOP 개념
핵심 비즈니스 로직과 공통 기능(부가 로직)을 분리하는 프로그래밍 방식
공통 기능(로깅, 트랜잭션, 성능 측정 등)을 여러 곳에 반복해서 작성하지 않고, 한 곳에서 관리할 수 있도록 도와줌

🛠 AOP의 주요 개념
Aspect:공통 기능을 정의하는 모듈
Advice:언제(메서드 실행 전/후, 예외 발생 시) 공통 기능을 실행할지 정의
Pointcut:공통 기능을 적용할 대상(메서드, 클래스 등)
JoinPoint:실제 실행되는 메서드(공통 기능이 적용되는 지점)

@Around:메서드 실행 전/후로 공통 기능을 적용하는 어노테이션
📌 코드 설명 
--------------------------------------------------------------------------
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

@Component  // ⭐ 이 클래스를 스프링 빈으로 등록 (스프링이 자동으로 관리)
@Aspect     // ⭐ 이 클래스가 AOP의 역할을 하는 Aspect임을 나타냄
public class TimeTraceAop {  // 실행 시간을 측정하는 AOP 클래스

    @Around("execution(* Hello.Hello_Spring..*(..))")      // ⭐ "Hello.Hello_Spring" 패키지와 그 하위 모든 클래스의 모든 메서드에 적용
    public Object execute(ProceedingJoinPoint joinPoint) throws Throwable {
        long start = System.currentTimeMillis();  // ⭐ 메서드 실행 시작 시간 기록
        System.out.println("START: " + joinPoint.toString());  // ⭐ 실행 시작 로그 출력

        try {
            return joinPoint.proceed();  
            // ⭐ 실제 대상 메서드 실행 (ex: service의 join(), findMember() 같은 메서드 실행)
        } finally {
            long finish = System.currentTimeMillis();  // ⭐ 메서드 실행 종료 시간 기록
            long timeMs = finish - start;  // ⭐ 실행 시간 계산
            System.out.println("END: " + joinPoint.toString() + " " + timeMs + "ms");
            // ⭐ 실행 완료 로그 출력 (메서드 이름 + 실행 시간)
        }
    }   
}
--------------------------------------------------------------------------
📌 실행 흐름 예제
예를 들어, 아래의 MemberService 클래스가 있다고 가정하자.
--------------------------------------------------------------------------
@Service
public class MemberService {
    public void join(Member member) {
        // 회원 가입 로직
    }
}
--------------------------------------------------------------------------
📌 AOP 적용 전
--------------------------------------------------------------------------
MemberService memberService = new MemberService();
memberService.join(new Member("종호"));
--------------------------------------------------------------------------
➡ 아무 로그도 출력되지 않음.

📌 AOP 적용 후 (TimeTraceAop 활성화)

memberService.join(new Member("종호"));
➡ AOP가 적용되면서 아래와 같은 실행 로그가 출력됨.
--------------------------------------------------------------------------
START: execution(void Hello.Hello_Spring.service.MemberService.join(..))
END: execution(void Hello.Hello_Spring.service.MemberService.join(..)) 5ms
✅ 메서드 실행 시간까지 측정되어 출력됨!
--------------------------------------------------------------------------
🔎 핵심 정리
AOP 기능	역할
@Aspect	이 클래스가 AOP 역할을 한다는 선언
@Component	스프링이 관리하는 빈으로 등록
@Around	메서드 실행 전후로 로직을 수행
joinPoint.proceed()	원래 실행하려던 메서드를 실행
System.currentTimeMillis()	실행 시간을 측정

🎯 정리
AOP를 사용하면 메서드 실행 시간을 측정하는 기능을 모든 클래스에 반복해서 작성할 필요 없이 한 곳에서 관리 가능
공통 기능(예: 로깅, 트랜잭션 처리, 보안 검사 등)을 손쉽게 추가할 수 있음
Spring Boot에서는 @Aspect와 @Around를 사용해서 쉽게 AOP를 적용할 수 있음
