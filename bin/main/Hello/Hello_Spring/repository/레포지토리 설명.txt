MemberRepository로 인터페이스를 기반으로  DB연결을 하여 데이터를 사용하는 3가지 방법이 있다.
3개중에 하나를 선택해서 쓰고 싶다면, SpringConfig클래스에서 
memberRepository()에서 사용하고자 하는 객체를 생성해주면 된다.

--------------------------------------------------------------------
***3가지로 구현한 레포지토리가 있는데
 3가지 레포지토리중에 하나를 SpringConfig클래스 memberRepository()에서 골라 선택하고
여기에서 정한것을 MemberService클래스에서 선택한 레포지토리를 가져다 쓴것이 핵심
---------------------------------------------------------------------

1.MemoryMemberRepository: Map을 이용해 데이터를 저장하는 방식
    ✔ 애플리케이션이 실행되는 동안만 데이터가 유지됨
    ✔ 테스트용으로 자주 사용됨
    ✔ 데이터베이스가 필요하지 않음

2.JdbcMemberRepository:
    ✔ 순수한 JDBC API를 사용하여 SQL을 직접 작성
    ✔ 데이터베이스 연결(Connection), SQL 실행(Statement), 결과(ResultSet) 등을 직접 관리
    ✔ try-catch-finally로 자원(Connection, Statement, ResultSet) 정리 필요
    ✔ 코드가 복잡하고 반복적인 부분이 많음

3.JdbcTemplateMemberRepository
    ✔ JDBC API를 감싸서 단순화한 JdbcTemplate 사용
    ✔ SQL을 직접 작성하지만 Connection 및 Statement 관리는 자동화됨
    ✔ 예외 처리가 간소화되어 try-catch-finally가 필요 없음
    ✔ 반복되는 JDBC 코드가 줄어들어 코드가 간결해짐

4.JpaMemberRepository
EntityManager는 JPA(Java Persistence API)에서 엔티티 객체와 데이터베이스 간의 상호작용을 관리하는 주요 인터페이스입니다. EntityManager는 JPA의 핵심 구성 요소로, 객체 지향적인 방식으로 데이터를 처리하는 데 중점을 둡니다.

주요 역할:
엔티티 관리: EntityManager는 엔티티 객체를 영속성 컨텍스트(persistence context)에 관리하고, CRUD 작업을 처리합니다.
영속성 컨텍스트: JPA에서 엔티티는 영속성 컨텍스트 내에서 관리됩니다. EntityManager는 엔티티를 저장하거나 수정하는 작업을 관리하고, 객체를 데이터베이스와 동기화합니다.
쿼리 실행: EntityManager는 JPQL(Java Persistence Query Language) 또는 네이티브 SQL을 사용하여 데이터베이스 쿼리를 실행합니다.
트랜잭션 관리: EntityManager는 트랜잭션을 시작하고, 커밋하거나 롤백하는 작업을 관리할 수 있습니다.

클래스별 차이점 비교
         클래스명	                데이터 저장 방식	 SQL 직접 작성 여부	     코드 간결성	    트랜잭션 관리
MemoryMemberRepository	        메모리(Map) 저장      	❌ 필요 없음	        ✅ 가장 간결	       ❌ 없음
JdbcMemberRepository	        JDBC 직접 사용	        ✅ 직접 작성	        ❌ 가장 복잡	      ❌ 수동 관리
JdbcTemplateMemberRepository	JdbcTemplate 사용	   ✅ 직접 작성	       ✅ 간결	        ✅ 자동 관리
